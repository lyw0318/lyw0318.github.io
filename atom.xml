<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.lyw1024.online/</id>
    <title>匿迹_lyw</title>
    <updated>2020-03-16T13:53:43.631Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.lyw1024.online/"/>
    <link rel="self" href="https://blog.lyw1024.online/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://blog.lyw1024.online/images/avatar.png</logo>
    <icon>https://blog.lyw1024.online/favicon.ico</icon>
    <rights>All rights reserved 2020, 匿迹_lyw</rights>
    <entry>
        <title type="html"><![CDATA[程序开发命名及日志规则]]></title>
        <id>https://blog.lyw1024.online/post/kai-fa-gui-fan</id>
        <link href="https://blog.lyw1024.online/post/kai-fa-gui-fan">
        </link>
        <updated>2020-03-14T10:02:31.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="javaspringboot项目">Java/SpringBoot项目</h1>
<h2 id="命名规范">命名规范：</h2>
<ul>
<li>统一说明：<br>
<strong>1</strong>.使用26个英文字母 (区分大小写) 和0-9的自然数 (一般不需要) 加下划线 ‘_’ 组成；<br>
<strong>2</strong>.命名简洁明确，忽略英文语法；<br>
<strong>3</strong>.注释明确规范，表述清楚，英文注释不可忽略英文语法错误；<br>
<strong>4</strong>.多个单词用驼峰式命名；<br>
<strong>5</strong>.不单独使用泛意义单词，<s>i，j，k，obj，str，newStr，newObj</s></li>
<li>包名：小写，单个单词。</li>
<li>类名/接口名： 驼峰式，首字母大写</li>
<li>对象/实例：驼峰式，首字母小写</li>
<li>方法名：驼峰式，首字母小写</li>
</ul>
<h2 id="日志规范">日志规范：</h2>
<ul>
<li>统一说明：<br>
<strong>1</strong>.不使用无持久化记录的控制台输出；<br>
<strong>2</strong>.for循环中尽量减少低等级(debug，info)的打印信息；<br>
<strong>3</strong>.日志需适当添加文字说明，不直接log.info(obj.toString())；</li>
<li>DEBUG等级:<br>
测试环境保留，生产环境关闭，业务进行中数据实时状态，辅助反馈bug的分析解决，试运营阶段会处于打开状态。</li>
<li>INFO等级:<br>
生产环境中会被保留的日志，记录服务程序和业务的实时状态，和记录数据变化的关键记录。</li>
<li>WARN等级:<br>
不影响程序或者业务继续进行，但出现正常预期之外情况的记录，比如：限量抢购中，下单成功但未能抢到，选择使用warn级打印。</li>
<li>ERROR等级:<br>
出现会影响程序或业务继续进行的错误，oauth2.0流程中，资源服务无法连接上认证服务。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据库命名及设计规则]]></title>
        <id>https://blog.lyw1024.online/post/shu-ju-ku-she-ji-gui-fan</id>
        <link href="https://blog.lyw1024.online/post/shu-ju-ku-she-ji-gui-fan">
        </link>
        <updated>2020-03-14T08:31:20.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="数据库命名规范">数据库命名规范</h1>
<h2 id="实体">实体：</h2>
<p><strong>1</strong>.本文中仅指来源于产品文档描述的，包括项目，系统，模块，属性等。不包含程序编写中的概率，如：class，funtion，object 不属于本文描述中的实体。<br>
<strong>2</strong>.<strong>英文表示使用单数描述</strong>，下文提到可使用复数时使用复数，其他情况一律使用单数。组合其他单词使用时部分工具报语法警告不必理会。</p>
<h2 id="统一说明">统一说明：</h2>
<p><strong>1</strong>.使用26个英文字母 (区分大小写) 和0-9的自然数 (一般不需要) 加下划线 ‘_’ 组成；<br>
<strong>2</strong>.命名简洁明确，忽略英文语法；<br>
<strong>3</strong>.注释明确规范，表述清楚，英文注释不可忽略英文语法错误；<br>
<strong>4</strong>.多个单词用下划线 ‘_’ 分隔；<br>
<strong>5</strong>.一个项目一个数据库，多个项目慎用同一个数据库；<br>
<strong>6</strong>.非专有名词使用小写。专有名词或广泛认可的缩写可使用大写（日活： DAU）</p>
<h2 id="库名">库名：</h2>
<p><strong>$数据用途-$环境</strong><br>
（例： 书法项目的测试环境库： calligraphy-test）</p>
<h2 id="表名">表名：</h2>
<p><strong>t_$系统_$实体</strong><br>
（例： 账号系统登录表： t_account_auth）</p>
<h2 id="视图">视图：</h2>
<p><strong>v_$实体_$附加信息</strong><br>
（例： 所有及格的学生： v_student_passed）</p>
<h2 id="字段">字段：</h2>
<p><strong>1</strong>.主键一律使用 <strong>数值型&quot;id&quot;</strong>；<br>
数值型： int，unsgined int， bigint， unsgined bigint<br>
<strong>2</strong>.<strong>不使用数据库关键字作为字段名</strong>；<br>
<strong>3</strong>.<strong>不使用泛意义单词</strong>；<br>
比如：用户系统中表1存储｛昵称，头像，自我描述｝，<br>
不使用 t_user_info表示基本信息，而使用t_user_face/t_user_show表示数据为展示信息。<br>
<strong>4</strong>.<strong>单条记录中存储多值使用复数</strong>，比如：</p>
<h1 id="关系型数据库设计规则">关系型数据库设计规则</h1>
<p>待补充</p>
<h1 id="非关系型数据库设计规则">非关系型数据库设计规则</h1>
<p>待补充</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS-7的Swap Space设置]]></title>
        <id>https://blog.lyw1024.online/post/centos-7-de-swap-space-she-zhi</id>
        <link href="https://blog.lyw1024.online/post/centos-7-de-swap-space-she-zhi">
        </link>
        <updated>2020-02-16T16:22:39.000Z</updated>
        <summary type="html"><![CDATA[<p>今天自己想跑一个java程序，但是由于测试机器为单核2G的配置，压力甚大，于是决定通过增加虚拟内存的方式来临时解决。</p>
]]></summary>
        <content type="html"><![CDATA[<p>今天自己想跑一个java程序，但是由于测试机器为单核2G的配置，压力甚大，于是决定通过增加虚拟内存的方式来临时解决。</p>
<!-- more -->
<h3 id="需要使用的命令清单">需要使用的命令清单：</h3>
<pre><code>free -h     # 查看内存(包括swap)使用情况
fallocate -l 2G /opt/swap   # 创建/opt/swap文件并申请2G占用空间
chmod 600 /opt/swap     # 设置/opt/swap文件权限，只运行root用户读写
mkswap /opt/swap    # 设置/opt/swap文件为swap类型
swapon /opt/swap    # 装载/opt/swap文件
swapoff /opt/swap    # 卸载/opt/swap文件
</code></pre>
<h3 id="需要查看修改的配置">需要查看/修改的配置：</h3>
<pre><code>/etc/fstab  # 挂载列表
/etc/sysctl.conf    #系统参数
</code></pre>
<h2 id="操作步骤">操作步骤：</h2>
<p>目标：设置swap为4G</p>
<ul>
<li>
<p>1.查看内存：<br>
free -h<br>
发现swap的total不为1G而used为0，说明系统已经设置有swap<br>
那么扩展内存有两种选择：卸载现有swap并装载一个4G的swap，或者直接添加一个3G的swap。<br>
由于used=0，所以我选择先卸载再添加，卸载步骤2-3选择直接添加可略过这几步。</p>
</li>
<li>
<p>2.查看当前swap文件，并删除当前的记录<br>
vi /etc/fstab<br>
找到swap内容为<br>
/www/swap    swap    swap    defaults    0 0<br>
所以当前swap文件为/www/swap<br>
删除记录</p>
</li>
<li>
<p>3.卸载当前swap文件<br>
swapoff /www/swap<br>
卸载完成，此时可以再次查看内存，swap.total将为0</p>
</li>
<li>
<p>4.创建新的swap文件，本次设置4G大小<br>
fallocate -l 4G /opt/swap<br>
chmod 600 /opt/swap<br>
mkswap /opt/swap<br>
完成swap文件创建</p>
</li>
<li>
<p>5.装载swap文件<br>
swapon /opt/swap<br>
此时在此使用查看命令已经可以看到swap.total=4G，但重启后会失效</p>
</li>
<li>
<p>6.添加文件记录：<br>
vi /etc/fstab<br>
文件最后添加一行,如果之前/www/swap没卸载也可直接添加：<br>
/opt/swap    swap    swap    defaults    0 0</p>
</li>
<li>
<p>7.设置操作系统swap使用权重：<br>
vi /etc/sysctl.conf<br>
找到vm.swappiness，vm.swappiness取值范围[0，100]，值越大代表越积极使用swap<br>
修改值，如果没有就添加一行，本次设置：<br>
vm.swappiness=60<br>
完成，可选择重启查看是否设置成功。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端实践笔记]]></title>
        <id>https://blog.lyw1024.online/post/qian-duan-shi-jian-bi-ji</id>
        <link href="https://blog.lyw1024.online/post/qian-duan-shi-jian-bi-ji">
        </link>
        <updated>2020-02-10T11:43:55.000Z</updated>
        <summary type="html"><![CDATA[<p>作为后端开发，工作上未必会用到前端东西。但是自己实践一些想法或者技术时，难免会需要做一些前端展示。本文将整理记录一些我认为比较重要的东西，由于主要是协助后端的功能完整，所以将以服务于实践为主。</p>
]]></summary>
        <content type="html"><![CDATA[<p>作为后端开发，工作上未必会用到前端东西。但是自己实践一些想法或者技术时，难免会需要做一些前端展示。本文将整理记录一些我认为比较重要的东西，由于主要是协助后端的功能完整，所以将以服务于实践为主。</p>
<!-- more -->
<h2 id="web前端">web前端</h2>
<ul>
<li>web前端最为常用，打包和发布流程也最为简洁，所以作为第一选择。</li>
</ul>
<h3 id="原生框架选择">原生/框架选择</h3>
<ul>
<li>原生代码，编写较为繁琐，胜在对开发环境的依耐性弱，适合独立api的测试/展示</li>
<li>框架使用可以简化DOM操作，数据绑定等，比较适合流程就为复杂的情况。</li>
</ul>
<h3 id="reactvue">react/vue</h3>
<ul>
<li>两者都是目前较为流行的框架，vue文档更为细致，并且体系更符合国内的思维，由国人开发和维护，更易学习，所以优先选择vue</li>
</ul>
<h3 id="要点记录">要点记录</h3>
<ul>
<li><strong>前端的import/export</strong><br>
由于web前端一般来说，会有html/css/JavaScript三者混用等，所以import相较于后端有时候并不能完全等同。</li>
</ul>
<h2 id="android">Android</h2>
<ul>
<li>对于产品级的实践，有时候我们会更希望是app，因为依赖于浏览器的web页，不适合调用音视频设备，并且不太适合使用频次高，流程较为复杂的功能，并且用户粘性较差。app方面选择更为开放的android。当然，如果有需要商业化的需要，可在进行ios的调研。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[IDEA搭建Python/Django开发环境]]></title>
        <id>https://blog.lyw1024.online/post/idea-da-jian-pythondjango-kai-fa-huan-jing</id>
        <link href="https://blog.lyw1024.online/post/idea-da-jian-pythondjango-kai-fa-huan-jing">
        </link>
        <updated>2020-02-08T14:50:03.000Z</updated>
        <summary type="html"><![CDATA[<p>由于本人需要开发java和python，所以选择了对两种开发支持都较好的IDEA。本文记录IDEA的python开发设置。</p>
]]></summary>
        <content type="html"><![CDATA[<p>由于本人需要开发java和python，所以选择了对两种开发支持都较好的IDEA。本文记录IDEA的python开发设置。</p>
<!-- more -->
<h2 id="版本介绍">版本介绍：</h2>
<ul>
<li>IDEA： IntelliJ IDEA 2019.3.2 (Ultimate Edition)</li>
<li>python：3.8.1(x86)</li>
<li>Django：3.0.3<br>
<em>理论上本文档可用于任意python/django版本</em></li>
</ul>
<h2 id="主要搭建步骤">主要搭建步骤：</h2>
<ul>
<li>1.官网下载python</li>
<li>2.安装IDEA的python插件</li>
<li>3.创建/克隆 django 工程</li>
<li>4.配置虚拟环境</li>
</ul>
<h2 id="在window环境下会遇到的问题">在window环境下会遇到的问题：</h2>
<ul>
<li>
<p>1.缺少mysqlclient无法启动<br>
会提示vc++的一些错误，本质上市需要那些库进行Build。对window熟悉者可自行判断如何解决。<br>
本文推荐解决方案：<br>
<strong>直接下载已编译的window版安装程序</strong><br>
下载地址：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysqlclient">pythonlibs</a><br>
下载完成后，到mysqlclient‑1.4.6‑cp38‑cp38‑win32.whl目录运行如下命令安装：<br>
python -m pip install mysqlclient‑1.4.6‑cp38‑cp38‑win32.whl<br>
如果安装仍然失败<br>
则检查版本<br>
cp38代表python版本需要3.8，<br>
win32代表适用于32位window操作系统<br>
如果版本无误<br>
则检查文件权限<br>
window我们不做过多深入，简单提升当前用户权限为完全控制</p>
<p>完成。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[静态博客搭建]]></title>
        <id>https://blog.lyw1024.online/post/jing-tai-bo-ke-da-jian</id>
        <link href="https://blog.lyw1024.online/post/jing-tai-bo-ke-da-jian">
        </link>
        <updated>2020-02-04T11:20:45.000Z</updated>
        <summary type="html"><![CDATA[<p><em>本文简单介绍本博客的搭建方案说明。其本质是Github Pages，使用Gridea来解决样式维护和文章编写体验差的问题。</em></p>
]]></summary>
        <content type="html"><![CDATA[<p><em>本文简单介绍本博客的搭建方案说明。其本质是Github Pages，使用Gridea来解决样式维护和文章编写体验差的问题。</em></p>
<!-- more -->
<h3 id="准备工作"><strong>准备工作</strong></h3>
<blockquote>
<p>Github账号，Gridea</p>
</blockquote>
<h3 id="要点记录"><strong>要点记录</strong></h3>
<blockquote>
<p>由于Gridea为中文网站并且搭建过程简单，在此不做赘述。<a href="https://gridea.dev/docs/">文档链接</a><br>
只记录和解决2个问题：<br>
1.Gridea未提供较好的多设备编辑功能，*.github.io仓库并不足以支撑多设备的需求。<br>
2.Gridea由于文件服务也依托于github，对于44+M的文件，下载较为困难。</p>
</blockquote>
<h3 id="下载地址"><strong>下载地址</strong></h3>
<p><a href="http://download.lyw1024.online/storage/Gridea.Setup.0.9.1.exe">Gridea.Setup.0.9.1.exe</a><em>(为本站提供,带宽同样有限)</em></p>
<h3 id="多设备编辑"><strong>多设备编辑</strong></h3>
<blockquote>
<p>Gridea文档上的解决方案个人认为有些麻烦，原文如下：<br>
<em>&quot;目前，你可以通过将博客源文件夹（默认是 ~/Documents/Gridea）通过 OneDrive 或其他类似网盘同步工具进行文件备份与同步&quot;</em><br>
云端备份虽然已经很普及了，但是毕竟又增加了新的搭建流程，而Github本身就有上传项目的功能。<br>
所以我新建用另一个Repository命名为github-pages-storage来存储源文件夹（~/Documents/Gridea）。<br>
目录结构如下：<br>
<img src="http://res.lyw1024.online/blog/post/1/1.png" alt="" loading="lazy"><br>
忽略列表需要添加 /Gridea/output/， 用于处理多层Repository可能引发的问题，<br>
git.7z打包的是Gridea/output/.git目录</p>
</blockquote>
<p><strong>还原/添加设备 步骤</strong>：</p>
<blockquote>
<p>1.安装运行Gridea，<br>
2.clone仓库github-pages-storage，<br>
3.修改Gridea中配置如下图：<br>
<img src="http://res.lyw1024.online/blog/post/1/2.png" alt="" loading="lazy"><br>
4.保存之后Gridea会自动重启<br>
5.点击Gridea预览，然后在github-pages-storage\Gridea\会出现out目录<br>
6.解压git.7z到github-pages-storage\Gridea\output目录<br>
7.完成，可以正常编写博客<br>
8.为了保证每次添加新设备不会回档，工作进行完之后务必进行github-pages-storage推送。</p>
</blockquote>
<p>遗留问题：Gridea未对接文件服务，所以博文中插入图片会非常影响网站性能，目前暂用外链的方式来引用图片，留待以后解决</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[技术要点整理]]></title>
        <id>https://blog.lyw1024.online/post/ji-zhu-yao-dian-zheng-li</id>
        <link href="https://blog.lyw1024.online/post/ji-zhu-yao-dian-zheng-li">
        </link>
        <updated>2020-02-03T16:34:36.000Z</updated>
        <summary type="html"><![CDATA[<p>博客刚刚搭建，先在此列出一些提纲，最初的文章将是对过去的总结。</p>
]]></summary>
        <content type="html"><![CDATA[<p>博客刚刚搭建，先在此列出一些提纲，最初的文章将是对过去的总结。</p>
<!-- more -->
<h2 id="基础技术篇">* 基础技术篇</h2>
<h3 id="java-集合io-多线程">JAVA 集合，IO， 多线程</h3>
<pre><code>源码解读，IO发展，NIO，Netty，多线程和单线程比较， 锁的使用，sap，线程数和cpu核心数测试优化
</code></pre>
<h3 id="java虚拟机">JAVA虚拟机</h3>
<pre><code>类加载，内存管理，执行原理，调试工具
</code></pre>
<h3 id="python">Python</h3>
<pre><code>python优势，process和greenlet
</code></pre>
<h3 id="mysql数据库">mysql数据库:</h3>
<pre><code>二叉树 -&gt;红黑树 -&gt; 索引原理 -&gt; 数据库引擎 -&gt; 读写分离+集群模式+分表分库
锁的使用，读写过程，事务执行，隔离级别， 注入攻击，  ORM产生原因，
</code></pre>
<h3 id="redis">redis:</h3>
<pre><code>原理-&gt;搭建方式-&gt;常用结构和场景，
持久化，单线程执行，redis6的多线程
</code></pre>
<h3 id="rabbitmq-kafka">rabbitMQ， kafka</h3>
<pre><code>队列存在的意义，消息丢失和幂问题，任务队列和消息队列，
</code></pre>
<h3 id="分布式微服务面向服务编程">分布式，微服务，面向服务编程</h3>
<pre><code>三者含义上的差别以及为何需要
服务间通信的方式/优势/适用场景
带来的新问题
网络波动，必要服务失去响应，雪崩效应，服务间死锁，等问题的原理和解决思路
分布式事务，二阶段提交和三阶段提交
目前流行的解决方案
</code></pre>
<h2 id="常用框架篇">* 常用框架篇</h2>
<h3 id="springboot">springboot</h3>
<pre><code>springboot工作原理，处理时序图，基础运行starter及starter机制， logstash日志
</code></pre>
<h3 id="mybatis">mybatis</h3>
<pre><code>mybatis-generator，xml，数据字段继承
</code></pre>
<h3 id="springcloud">springcloud</h3>
<pre><code>微服务基本版(服务注册发现eruake+请求前门Zuul+熔断机制Hystrix)
springcloud基础项目+Spring Cloud Starters +Spring Cloud Config
服务注册发现eruake 和zookeeper的原理和比较
Feign和zuul
</code></pre>
<h3 id="搜索服务-xapiansolres">搜索服务 Xapian，solr，es</h3>
<pre><code>luncene的基本流程
Xapian，solr，es 的区别，适用数据量级。
</code></pre>
<h3 id="elasticsearchlogstashkibana">Elasticsearch,Logstash,Kibana</h3>
<pre><code>原理，流程，解决何种问题
</code></pre>
<p>###FireFly，Django， Flask， WSGI</p>
<h2 id="实际项目篇">* 实际项目篇</h2>
<h3 id="io密集计算密集但一致性要求稍低的游戏服务">IO密集，计算密集，但一致性要求稍低的游戏服务</h3>
<pre><code>解耦两端数据的同步， 用户-&gt;服务-&gt;DB 两箭头取消互相等待。
</code></pre>
<h3 id="io密集一致性要求高-的电商服务">IO密集，一致性要求高 的电商服务</h3>
<pre><code>同步操作和持久化，前端排队 用户-&gt;服务 之间架设队列，牺牲用户响应效率
</code></pre>
<h3 id="多端登录改造">多端登录改造</h3>
<pre><code>oauth2.0 流程，多session处理
</code></pre>
<h2 id="技术及思路解读篇">* 技术及思路解读篇</h2>
<h3 id="restful风格api">restful风格API</h3>
<h3 id="面向接口编程">面向接口编程</h3>
<h3 id="泛型编程">泛型编程</h3>
<h3 id="微信支付支付宝支付">微信支付/支付宝支付</h3>
<pre><code>支付流程，不同流程将会面临的问题
</code></pre>
<h3 id="e-mail发送">e-mail发送</h3>
<h3 id="oss">OSS</h3>
<pre><code>私有空间，STS授权访问
</code></pre>
<h3 id="ffmpeg">FFmpeg</h3>
<pre><code>音视频处理
</code></pre>
<h3 id="短信发送">短信发送</h3>
<h3 id="微信公众号推送">微信公众号推送</h3>
<h2 id="规范篇">* 规范篇</h2>
<h3 id="数据库设计规范">数据库设计规范</h3>
<h3 id="git使用规范">git使用规范</h3>
<h3 id="接口规范">接口规范</h3>
<h3 id="编码规范">编码规范</h3>
<h2 id="探索篇">* 探索篇</h2>
<h3 id="暂未能解决的问题">暂未能解决的问题</h3>
<pre><code>浏览器指纹，低频消耗验证码，
</code></pre>
<h2 id="算法篇">* 算法篇</h2>
<pre><code>排序
反射
</code></pre>
]]></content>
    </entry>
</feed>